name: Publish Docker image to multiple registry with multistage

on:
#  release:
#    types: [published]

  push:
    # branches:
    #   - main
    #   - 'releases/**'
    tags:
      - '*'

  workflow_dispatch:


env:

  # IMAGE_TAG: v1.0.0
  IMAGE_TAG: "${{ github.ref_name }}"

  REGISTRY_TAG: ${{ github.event.repository.name }}

  #Github registry parameter
  GITHUB_CONTAINER_REGISTRY: ghcr.io

  #ECR registry parameter
  ECR_AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: test

  #Openshift registry parameter
  OPENSHIFT_REGISTRY: tba
  OPENSHIFT_USERNAME: tba



jobs:
  build_and_scan_image:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3


      - name: Build Docker images
        uses: docker/build-push-action@v3
        with:
          context: ./
          tags: '${{ env.REGISTRY_TAG }}:${{ env.IMAGE_TAG }}'

      # - name: test
      #   run: |
      #     docker images

      # - name: test
      #   run: |
      #     echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_TAG }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

            # - name: Run Trivy vulnerability scanner
            #   uses: aquasecurity/trivy-action@master
            #   with:
            #     image-ref: 'docker-security:${{ env.IMAGE_TAG }}'
            #     format: 'json'
            #     output: 'trivy-results.output'
            #     severity: 'CRITICAL,HIGH'

            # - name: Generate result for artifact upload
            #   uses: aquasecurity/trivy-action@master
            #   with:
            #     image-ref: 'docker-security:${{ env.IMAGE_TAG }}'
            #     format: 'table'
            #     output: 'trivy-results.txt'
            #     severity: 'CRITICAL,HIGH'


            # - name: Upload result to artifact
            #   uses: actions/upload-artifact@v3
            #   with:
            #     name: trivy-results
            #     path: ./trivy-results.txt


            # - name: Add trivy result to github outputs
            #   id: trivyresults
            #   run: |
            #     VULN_FLAG=$(jq 'any(.Results[]; select(.Vulnerabilities))' trivy-results.output)
            #     echo "TRIVY_VULN_FLAG=${VULN_FLAG}">>$GITHUB_OUTPUT

            # - name: Vulnerabilities detected
            #   if: ${{ steps.trivyresults.outputs.TRIVY_VULN_FLAG == 'true' }}
            #   uses: actions/github-script@v6
            #   with:
            #     script: |
            #         core.setFailed('Failed image scanning')


  push_to_container_registry:
    runs-on: ubuntu-latest
    needs:  build_and_scan_image
    steps:

      - name: Check out the repo
        uses: actions/checkout@v3


      - name: Log in to the Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GITHUB_CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.GITHUB_CONTAINER_REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=${{ env.IMAGE_TAG }}


      - name: Push Docker images
        uses: docker/build-push-action@v3
        with:
          context: ./
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: test
        run: |
          docker images
          
          
          # push_to_ecr:
          #   runs-on: ubuntu-latest
          #   needs:  build_and_scan_image
          #   steps:
          
          #     - name: Check out the repo
          #       uses: actions/checkout@v3
          
          
          #     - uses: aws-actions/configure-aws-credentials@v1
          #       with:
          #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #         aws-region: ${{ env.ECR_AWS_REGION }}
          
          #     - name: Login to Amazon ECR
          #       id: login-ecr
          #       uses: aws-actions/amazon-ecr-login@v1   
          
          #     - name: Extract metadata (tags, labels) for Docker
          #       id: meta
          #       uses: docker/metadata-action@v4
          #       with:
          #         images: |
          #           ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          #         tags: |
          #           type=raw,value=${{ env.IMAGE_TAG }}
          
          
          #     - name: Push Docker images
          #       uses: docker/build-push-action@v3
          #       with:
          #         context: ./reacttest
          #         push: true
          #         tags: ${{ steps.meta.outputs.tags }}
          
          #     - name: test
          #       run: |
          #         docker images
          
          
          # push_to_openshift:
          #   runs-on: ubuntu-latest
          #   needs:  build_and_scan_image
          #   steps:
          
          #     - name: Check out the repo
          #       uses: actions/checkout@v3
          
          #     # - name: Log in to the Github Container registry
          #     #   uses: docker/login-action@v2
          #     #   with:
          #     #     registry: ${{ env.OPENSHIFT_REGISTRY }}
          #     #     username: ${{ env.OPENSHIFT_USERNAME }}
          #     #     password: ${{ secrets.OPENSHIFT_PASSWORD }}
          
          #     # to explore    
          #     # https://github.com/redhat-actions/push-to-registry    
          #     - name: TODO
          #       run: |
          #         echo "push to openshift"
          
          
